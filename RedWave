#!/bin/bash
# author: SÃ©bastien Boisvert
# date: 2011-12-23

# this is some heavy scripting
# parallel machines in bash
# I use variable indirection

referenceFileOrigin=$1
# the argument must not be absolute paths.
sampleDirectoryOrigin=$2
processors=$3
output=$4

mkdir $output
cd $output

source $DARK_FISH_TECHNOLOGY

DarkFishTechnology_initializeDirectory

DarkFishTechnology_prepareReference $referenceFileOrigin
DarkFishTechnology_prepareSample $sampleDirectoryOrigin

DarkFishTechnology_runCommand 0 "samtools &> meta/samtools.version"
DarkFishTechnology_runCommand 0 "bcftools &> meta/bcftools.version"
DarkFishTechnology_runCommand 0 "bwa &> meta/bwa.version"
DarkFishTechnology_runCommand 0 "samstat -help &> meta/samstat.version"

# for bwa
DarkFishTechnology_runCommand 0 "bwa index Reference/Reference.fasta"

# for samtools
DarkFishTechnology_runCommand 0 "samtools faidx Reference/Reference.fasta"

DarkFishTechnology_moveReferenceCache

# we have <processors> processors
# and we have n files
# the command is  bwa aln reference reads > sai
# we have to generate some variables

fileNumber=0

DarkFishTechnology_runCommand 0 "mkdir BinaryAlignments"

# generate alignments
for file in $(ls Sample)
do
	processorNumber=$(($fileNumber%$processors))
	randomFile=$(DarkFishTechnology_generateCacheEntry)
	command="( bwa aln Reference/Reference.fasta Sample/$file > $randomFile ) ; "
	command=$command" ( DarkFishTechnology_linkCacheEntry $randomFile BinaryAlignments $file.sai ) ; "

#	processorVariable=processor$processorNumber"BinaryAlignments"
#	oldValue=$(eval echo \$$processorVariable)
	oldValue=$(eval echo BinaryAlignments[$processorNumber])
	newValue=$oldValue$command
	BinaryAlignments[$processorNumber]=$newValue
#	toEval="$processorVariable=\"$newValue\""

#	eval $toEval

	fileNumber=$(($fileNumber+1))
done

DarkFishTechnology_runGroupCommands "BinaryAlignments"

fileNumber=0
DarkFishTechnology_runCommand 0 "mkdir SamAlignments"

# generate compressed sam files
for fileR1 in $(ls Sample|grep _R1_)
do
	fileR2=$(echo $fileR1|sed 's/_R1_/_R2_/g')
	fileRX=$(echo $fileR1|sed 's/_R1_/_RX_/g')

	randomFile=$(DarkFishTechnology_generateCacheEntry)

	processorNumber=$(($fileNumber%$processors))
	command=" ( bwa sampe Reference/Reference.fasta BinaryAlignments/$fileR1.sai BinaryAlignments/$fileR2.sai Sample/$fileR1 Sample/$fileR2 |gzip > $randomFile ) ; ( DarkFishTechnology_linkCacheEntry $randomFile SamAlignments $fileRX.sam.gz ) ; "
	

#	processorVariable=processor$processorNumber"SamAlignments"
#	oldValue=$(eval echo \$$processorVariable)
	oldValue=$(eval echo SamAlignments[$processorNumber])
	newValue=$oldValue$command
	SamAlignments[$processorNumber]=newValue

#	toEval="$processorVariable=\"$newValue\""

#	eval $toEval

	fileNumber=$(($fileNumber+1))
done

DarkFishTechnology_runGroupCommands "SamAlignments"
DarkFishTechnology_purgeGroupCache "BinaryAlignments"

DarkFishTechnology_finishAlignmentAnalysis


